// Code generated by goyacc - DO NOT EDIT.

// Copyright 2021 The web2go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import __yyfmt__ "fmt"
import __sync__ "sync"

// import "modernc.org/web2go"

var yyPool = __sync__.Pool{New: func() interface{} { s := make([]yySymType, 200); return &s }}

type yySymType struct {
	yys  int
	tok  tok
	node node
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault    = 57388
	yyEofCode    = 57344
	AND          = 57346
	ARRAY        = 57347
	ASSIGN       = 57348
	BEGIN        = 57349
	BOOLEAN      = 57350
	CASE         = 57351
	CONST        = 57352
	DD           = 57353
	DIV          = 57354
	DO           = 57355
	ELSE         = 57356
	END          = 57357
	FALSE        = 57358
	FILE         = 57359
	FOR          = 57360
	FORWARD      = 57361
	FUNCTION     = 57362
	GE           = 57363
	GOTO         = 57364
	IDENTIFIER   = 57365
	IF           = 57366
	INTEGER      = 57367
	INT_LITERAL  = 57368
	LABEL        = 57369
	LE           = 57370
	NOT          = 57371
	OF           = 57372
	OR           = 57373
	PACKED       = 57374
	PROCEDURE    = 57375
	PROGRAM      = 57376
	REAL         = 57377
	REAL_LITERAL = 57378
	RECORD       = 57379
	REPEAT       = 57380
	SEP          = 57381
	STR_LITERAL  = 57382
	THEN         = 57383
	TO           = 57384
	TRUE         = 57385
	VAR          = 57386
	WHILE        = 57387
	yyErrCode    = 57345

	yyMaxDepth = 200
	yyTabOfs   = -3
)

var (
	yyPrec = map[int]int{}

	yyFollow = [][]int{
		{57376, 57389, 57390}, // state 0
		{57344},               // state 1
		{57344},               // state 2
		{57365},               // state 3
		{57344},               // state 4
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (3x)
		57365: 1,  // IDENTIFIER (1x)
		57376: 2,  // PROGRAM (1x)
		57390: 3,  // program (1x)
		57389: 4,  // Program (1x)
		57388: 5,  // $default (0x)
		57346: 6,  // AND (0x)
		57347: 7,  // ARRAY (0x)
		57348: 8,  // ASSIGN (0x)
		57349: 9,  // BEGIN (0x)
		57350: 10, // BOOLEAN (0x)
		57351: 11, // CASE (0x)
		57352: 12, // CONST (0x)
		57353: 13, // DD (0x)
		57354: 14, // DIV (0x)
		57355: 15, // DO (0x)
		57356: 16, // ELSE (0x)
		57357: 17, // END (0x)
		57345: 18, // error (0x)
		57358: 19, // FALSE (0x)
		57359: 20, // FILE (0x)
		57360: 21, // FOR (0x)
		57361: 22, // FORWARD (0x)
		57362: 23, // FUNCTION (0x)
		57363: 24, // GE (0x)
		57364: 25, // GOTO (0x)
		57366: 26, // IF (0x)
		57368: 27, // INT_LITERAL (0x)
		57367: 28, // INTEGER (0x)
		57369: 29, // LABEL (0x)
		57370: 30, // LE (0x)
		57371: 31, // NOT (0x)
		57372: 32, // OF (0x)
		57373: 33, // OR (0x)
		57374: 34, // PACKED (0x)
		57375: 35, // PROCEDURE (0x)
		57377: 36, // REAL (0x)
		57378: 37, // REAL_LITERAL (0x)
		57379: 38, // RECORD (0x)
		57380: 39, // REPEAT (0x)
		57381: 40, // SEP (0x)
		57382: 41, // STR_LITERAL (0x)
		57383: 42, // THEN (0x)
		57384: 43, // TO (0x)
		57385: 44, // TRUE (0x)
		57386: 45, // VAR (0x)
		57387: 46, // WHILE (0x)
	}

	yySymNames = []string{
		"$end",
		"IDENTIFIER",
		"PROGRAM",
		"program",
		"Program",
		"$default",
		"AND",
		"ARRAY",
		"ASSIGN",
		"BEGIN",
		"BOOLEAN",
		"CASE",
		"CONST",
		"DD",
		"DIV",
		"DO",
		"ELSE",
		"END",
		"error",
		"FALSE",
		"FILE",
		"FOR",
		"FORWARD",
		"FUNCTION",
		"GE",
		"GOTO",
		"IF",
		"INT_LITERAL",
		"INTEGER",
		"LABEL",
		"LE",
		"NOT",
		"OF",
		"OR",
		"PACKED",
		"PROCEDURE",
		"REAL",
		"REAL_LITERAL",
		"RECORD",
		"REPEAT",
		"SEP",
		"STR_LITERAL",
		"THEN",
		"TO",
		"TRUE",
		"VAR",
		"WHILE",
	}

	yyTokenLiteralStrings = map[int]string{
		57365: "identifier",
		57376: "program",
		57346: "and",
		57347: "array",
		57348: ":=",
		57349: "begin",
		57350: "boolean",
		57351: "case",
		57352: "const",
		57353: "..",
		57354: "div",
		57355: "do",
		57356: "else",
		57357: "end",
		57358: "false",
		57359: "file",
		57360: "for",
		57361: "forward",
		57362: "function",
		57363: ">=",
		57364: "goto",
		57366: "if",
		57368: "integer literal",
		57367: "integer",
		57369: "label",
		57370: "<=",
		57371: "not",
		57372: "of",
		57373: "or",
		57374: "packed",
		57375: "procedure",
		57377: "real",
		57378: "real literal",
		57379: "record",
		57380: "repeat",
		57381: "separator",
		57382: "string literal",
		57383: "then",
		57384: "to",
		57385: "true",
		57386: "var",
		57387: "while",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0: {0, 1},
		1: {3, 1},
		2: {4, 2},
	}

	yyXErrors = map[yyXError]string{
		{0, 0}:  "invalid empty input",
		{1, -1}: "expected $end",
		{2, -1}: "expected $end",
		{4, -1}: "expected $end",
		{3, -1}: "expected identifier",
		{0, -1}: "expected program or ",
	}

	yyParseTab = [5][]uint8{
		// 0
		{2: 6, 4, 5},
		{3},
		{2},
		{1: 7},
		{1},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), prettyString(&lval.tok): %v\n", yySymName(n), n, n, prettyString(&lval.tok))
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 18

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	p := yyPool.Get().(*[]yySymType)
	yyS := *p

	defer func() {
		var v yySymType
		for i := range yyS {
			yyS[i] = v
		}
		yyPool.Put(p)
	}()

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.node = &program{
				Program: yyS[yypt-0].node.(*Program),
			}
			panic(todo(""))
		}
	case 2:
		{
			yyVAL.node = &Program{
				tok:  yyS[yypt-1].tok,
				tok2: yyS[yypt-0].tok,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
