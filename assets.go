// Code generated by assets compiler. DO NOT EDIT.

package main

var (
	assets = map[string]string{
		"/changefile.ch": "@x\n@d othercases == others: {default for cases not listed explicitly}\n@y\n@d othercases == else {default for cases not listed explicitly}\n@z\n",
		"/rtl.go":        "// NOTE: This file (rtl.go) has a different license compared to all of the\n// other Go files in this repository.\n\n// ----------------------------------------------------------------------------\n//\n// No Copyright\n//\n// The person who associated a work with this deed has dedicated the work to\n// the public domain by waiving all of his or her rights to the work worldwide\n// under copyright law, including all related and neighboring rights, to the\n// extent allowed by law.\n//\n// You can copy, modify, distribute and perform the work, even for commercial\n// purposes, all without asking permission. See Other Information below.\n//\n// This license is acceptable for Free Cultural Works.\n//\n// Other Information\n//\n// In no way are the patent or trademark rights of any person affected by CC0,\n// nor are the rights that other persons may have in the work or in how the\n// work is used, such as publicity or privacy rights.\n//\n// Unless expressly stated otherwise, the person who associated a work with\n// this deed makes no warranties about the work, and disclaims liability for\n// all uses of the work, to the fullest extent permitted by applicable law.\n//\n// When using or citing the work, you should not imply endorsement by the\n// author or the affirmer.\n//\n// ----------------------------------------------------------------------------\n// Source of the above: https://creativecommons.org/publicdomain/zero/1.0/\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype memoryWord struct {\n\tvariant float64\n}\n\n/* CUT HERE */\n\nvar _ error = pasError(0)\n\nconst (\n\tpasEndOfTeX pasError = -iota - 1\n\tpasFinalEnd\n)\n\ntype pasError int\n\nfunc (pasError) Error() string { return \"\" }\n\nfunc pasJumpOut() { panic(pasEndOfTeX) }\n\nfunc abs(n float64) float64 { return math.Abs(n) } //TODO check the Pascal definition.\n\nfunc chr(i int32) byte { return byte(i) }\n\nfunc iabs(n int32) int32 {\n\tif n >= 0 {\n\t\treturn n\n\t}\n\n\tif n == math.MinInt32 {\n\t\tpanic(\"overflow\")\n\t}\n\n\treturn -n\n}\n\nfunc odd(i int32) bool { return i&1 != 0 }\n\nfunc round(n float64) int32 { return int32(math.Round(n)) } //TODO check the Pascal definition.\n\ntype vaWidth int\n\nfunc read(args ...interface{}) {\n\tpanic(\"TODO\")\n}\n\nfunc readLn(args ...interface{}) {\n\tpanic(\"TODO\")\n}\n\nfunc write(args ...interface{}) {\n\tpanic(\"TODO\")\n}\n\nfunc writeLn(args ...interface{}) {\n\tpanic(\"TODO\")\n}\n\ntype pasFile struct{} //TODO\n\nfunc (f *pasFile) byte() byte {\n\tpanic(\"TODO\")\n}\n\nfunc (f *pasFile) memoryWord() memoryWord {\n\tpanic(\"TODO\")\n}\n\nfunc (f *pasFile) pMemoryWord() *memoryWord {\n\tpanic(\"TODO\")\n}\n\nfunc break1(f *pasFile) {\n\tpanic(\"TODO\")\n}\n\nfunc breakIn(f *pasFile, b bool) {\n\tpanic(\"TODO\")\n}\n\nfunc close(f *pasFile) {\n\tpanic(\"TODO\")\n}\n\nfunc eof(f *pasFile) bool {\n\tpanic(\"TODO\")\n}\n\nfunc eoln(f *pasFile) bool {\n\tpanic(\"TODO\")\n}\n\nfunc erstat(f *pasFile) int32 {\n\tpanic(\"TODO\")\n}\n\nfunc get(f *pasFile) {\n\tpanic(\"TODO\")\n}\n\nfunc put(f *pasFile) {\n\tpanic(\"TODO\")\n}\n\nfunc reset(f *pasFile, s1, s2 string) {\n\tpanic(fmt.Errorf(\"reset(%q, %q) TODO\", s1, s2))\n}\n\nfunc rewrite(f *pasFile, s1, s2 string) {\n\tpanic(fmt.Errorf(\"rewrite(%q, %q) TODO\", s1, s2))\n}\n",
	}
)
